/**
 * EXPORT ALL PROMPTS
 * Generates prompts with Gemini and saves to file for manual use
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import modules
import Analyzer from './modules/analyzer.js';
import DesignLearner from './modules/learner.js';
import PromptEngineer from './modules/prompter.js';
import logger from './utils/logger.js';

async function main() {
  try {
    // Load config
    const configPath = path.join(__dirname, 'config.json');
    const config = JSON.parse(await fs.readFile(configPath, 'utf-8'));

    console.log('\nüé® GEMINI PROMPT GENERATOR\n');
    console.log('‚ïê'.repeat(60));
    console.log('‚úÖ Gemini 2.5 Flash - Generating AI prompts');
    console.log('üì¶ Found your brand colors and design system');
    console.log('üéØ Creating perfect prompts for all images\n');

    // Step 1: Analyze
    console.log('[1/3] Analyzing project...');
    const analyzer = new Analyzer(config);
    const analysisResults = await analyzer.analyze();
    console.log(`‚úÖ Found ${analysisResults.pages.length} pages`);
    console.log(`‚úÖ Need ${analysisResults.totalImagesNeeded} images\n`);

    // Step 2: Learn design system
    console.log('[2/3] Learning design system...');
    const learner = new DesignLearner(config);
    const designKnowledge = await learner.learn();
    console.log(`‚úÖ Loaded ${Object.keys(designKnowledge.brandColors).length} brand colors\n`);

    // Step 3: Generate prompts with Gemini
    console.log('[3/3] Generating prompts with Gemini AI...');
    const prompter = new PromptEngineer(config, designKnowledge);
    const prompts = await prompter.generatePrompts(analysisResults);
    console.log(`‚úÖ Generated ${prompts.length} prompts\n`);

    // Export to markdown
    let markdown = `# AI-Generated Image Prompts for Link Innovations\n\n`;
    markdown += `Generated by: **Gemini 2.5 Flash**\n`;
    markdown += `Date: ${new Date().toLocaleString()}\n`;
    markdown += `Total Prompts: **${prompts.length}**\n\n`;
    markdown += `---\n\n`;

    markdown += `## üìã Quick Stats\n\n`;
    markdown += `- Pages: ${analysisResults.pages.length}\n`;
    markdown += `- Images needed: ${prompts.length}\n`;
    markdown += `- Brand colors integrated: ‚úÖ\n`;
    markdown += `- Design system applied: ‚úÖ\n\n`;

    markdown += `---\n\n`;

    // Group by page
    const promptsByPage = {};
    for (const prompt of prompts) {
      if (!promptsByPage[prompt.pageName]) {
        promptsByPage[prompt.pageName] = [];
      }
      promptsByPage[prompt.pageName].push(prompt);
    }

    let promptNum = 1;
    for (const [pageName, pagePrompts] of Object.entries(promptsByPage)) {
      markdown += `## ${pageName}\n\n`;
      
      for (const prompt of pagePrompts) {
        markdown += `### ${promptNum}. ${prompt.imageType} Image\n\n`;
        markdown += `**Type:** ${prompt.imageType}\n`;
        markdown += `**Dimensions:** ${prompt.metadata.dimensions}\n`;
        markdown += `**Aspect Ratio:** ${prompt.metadata.aspectRatio}\n\n`;
        
        markdown += `**PRIMARY PROMPT:**\n`;
        markdown += `\`\`\`\n${prompt.prompt.primary || prompt.prompt}\n\`\`\`\n\n`;
        
        if (prompt.prompt.alternate || prompt.alternatePrompt) {
          markdown += `**ALTERNATE PROMPT:**\n`;
          markdown += `\`\`\`\n${prompt.prompt.alternate || prompt.alternatePrompt}\n\`\`\`\n\n`;
        }
        
        markdown += `**Where to use:**\n`;
        markdown += `- File: \`${prompt.page}\`\n`;
        markdown += `- Purpose: ${prompt.metadata.purpose}\n\n`;
        
        markdown += `---\n\n`;
        promptNum++;
      }
    }

    // Add usage instructions
    markdown += `## üéØ How to Use These Prompts\n\n`;
    markdown += `### Option 1: Midjourney\n`;
    markdown += `1. Copy any PRIMARY or ALTERNATE prompt\n`;
    markdown += `2. Paste in Midjourney Discord\n`;
    markdown += `3. Add: \`--ar ${prompts[0]?.metadata.aspectRatio || '16:9'} --v 6\`\n`;
    markdown += `4. Generate!\n\n`;

    markdown += `### Option 2: Leonardo.ai (FREE)\n`;
    markdown += `1. Go to: https://leonardo.ai\n`;
    markdown += `2. Sign up (free tier available)\n`;
    markdown += `3. Paste prompts\n`;
    markdown += `4. Set aspect ratio to match\n`;
    markdown += `5. Generate!\n\n`;

    markdown += `### Option 3: Ideogram.ai (FREE)\n`;
    markdown += `1. Go to: https://ideogram.ai\n`;
    markdown += `2. Sign up (free)\n`;
    markdown += `3. Paste prompts\n`;
    markdown += `4. Generate!\n\n`;

    markdown += `### Option 4: Local Stable Diffusion\n`;
    markdown += `1. Install: https://github.com/AUTOMATIC1111/stable-diffusion-webui\n`;
    markdown += `2. 100% free, runs on your PC\n`;
    markdown += `3. Use these prompts\n\n`;

    markdown += `---\n\n`;
    markdown += `**‚ú® All prompts are brand-aligned with Link Innovations design system!**\n`;
    markdown += `**üé® Colors: Blue (#3B82F6), Purple (#8B5CF6), Cyan (#06B6D4)**\n`;

    // Save to file
    const outputPath = path.join(__dirname, '../GENERATED_PROMPTS.md');
    await fs.writeFile(outputPath, markdown, 'utf-8');

    console.log('‚ïê'.repeat(60));
    console.log('\n‚ú® SUCCESS!\n');
    console.log(`üìÑ Saved to: GENERATED_PROMPTS.md`);
    console.log(`üìä Total prompts: ${prompts.length}`);
    console.log(`üé® All brand-aligned and ready to use!\n`);
    console.log('üéØ Use with: Midjourney, Leonardo.ai, Ideogram.ai, or local SD\n');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

main();

